name: release

# trigger on published release
on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  
jobs:
  load_supported_versions:
    runs-on: ubuntu-20.04

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Save supported versions as output
        id: set-matrix
        run: |
          SUPPORTED_VERSIONS=$(cat ./supported_versions.json)
          SUPPORTED_VERSIONS="${SUPPORTED_VERSIONS//'%'/%25}"
          SUPPORTED_VERSIONS="${SUPPORTED_VERSIONS//$'\n'/%0A}"
          SUPPORTED_VERSIONS="${SUPPORTED_VERSIONS//$'\r'/%0D}"
          echo "::set-output name=matrix::${SUPPORTED_VERSIONS}"

  build_push_release:
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      
    needs:
      - load_supported_versions

    strategy:
      matrix: ${{ fromJSON(needs.load_supported_versions.outputs.matrix) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Get and save release tag
        run: echo "RELEASE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Build and save image release tag
        run: echo "IMAGE_RELEASE_TAG=release-${RELEASE_TAG}_terraform-${{ matrix.tf_version }}_azcli-${{ matrix.azcli_version }}" >> $GITHUB_ENV

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.13.1'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: view tags
        id: view_tags
        run: echo ${{ steps.meta.outputs.tags }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: 
            - ${{ steps.meta.outputs.tags }}
            - ${IMAGE_RELEASE_TAG}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            AZ_VERSION=${{ matrix.azcli_version }}
            TF_VERSION=${{ matrix.tf_version }}


      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
